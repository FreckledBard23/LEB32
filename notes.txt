--- COMPILER ---
    -- instruction lengths -- 
        instructions in {brackets} are replaced with NOP if unneccessary

        - if - base 3, 2 more
            - if statement
            - if {reg} {operator} {reg / dec}
            - {load comparator mst addr, mst comparator}, set address mst addr, mst address, jump

        - set - base 2
            - load data into reg
            - set {reg} to {dec}
            - load data mst addr, mst

        - result - base 1, 2 more
            - perform an operation with the ALU
            - result of {reg} {alu op} {reg / constant} to {reg}
            - {load constant mst addr, mst constant}, alu

        - pixel - base 1, 2 more
            - make pixel index a color. 
                - if the highest bit of the color and character is 1, it will draw one pixel
                - if not, it takes the highest 8 bits to use as ascii.
            - pixel {reg} to {reg / color & character}
            - {load mst color / character addr, mst color and character}, wrt

        - push - base 1
            - push {reg}
            - push

        - pop - base 1
            - pop {reg}
            - pop

        - end - base 1
            - end
            - hlt

        - store - base 1, 2 more
            - store to ram
            - store {reg} to {addr / reg}
            - {load address mst addr, mst address}, wrt

        - read - base 1, 2 more
            - read from ram
            - read from {addr / reg}
            - {load mst addr address, mst addr}, mst

        - while - base 3, 2 more, same at end of loop
            - while loop. compare reg to constant or reg
            - while {reg} {operator} {reg / dec}
            - {load comparator mst addr, mst comparator}, set address mst addr, mst address, jump
            
        - goto - base 3
            - go to code address tag
                - to define a tag
                    :{tag name}:
                - example:
                    :printchar:
            - goto {code label / reg}
            - mst addr address, mst addr, jump

        - define - NA
            - works like #define in C. The compiler replaces all the names with the set string
            - define {name} as {str to be replaced as}

        - undefine - NA
            - undoes a define command
            - undefine {name}


--- REGS ---
    - A
    - B
    - C
    - D
    - E
    - F
    - G
    - H
    - J
    - K
    - L
    - M
    - N - used by compiler as an address
    - O - used by compiler as a datapoint
    - P - used by compiler as a datapoint


--- INSTRUCTIONS ---
    - NOP - 0 - does nothing
    - HLT - 1 - halts
    - STR - 2 - store into W1 from instruction data
    - MST - 3 - store into W1 from memory addr R2
    - ALU - 4 - preform operation between R1 and R2
    - JMP - 5 - jump to R1 if condition
    - WRT - 6 - writes R1 to memory addr R2
    - PSH - 7 - push R1 onto stack
    - PLL - 8 - pull stack into W1

--- ALU ---
    instruction data is:
        0 - add
        1 - sub
        2 - multi
        3 - divide
        4 - shift

--- JUMP & IF ---
    instruction data is:
        0 - unconditional
        1 - A == B
        2 - A != B
        3 - A >  B
        4 - A <  B
        5 - A >= B
        6 - A <= B

--- MICROCODE ---
    -- FORMAT --
        0000000000000000 - 0000 - 0000 - 0000 - 0000
        instruction data - r W1 - r R1 - r R2 - inst

    -- OPCODES --
        - reg_str
        - mem_or_data
        - jmp
        - hlt
        - ALU_en
        - we
        - psh
        - pll

--- MEMORY CHUNKS ---
    0x00000000 to 0x00FFFFFF - ROM
    0x01000000 to 0x01FFFFFF - RAM
    0x02000000 to 0x02FFFFFF - SCREEN - Only first 65536 values are used however, due to size of screen. Last pixel is at 0x0200FFFF.
        - If the highest bit of the data is a one it will only draw one pixel.
        - If it is not, it will draw a 8x8 rectangle with the ascii value. 
                                (added ascii 0x01 as solid rectangle)
        - BIT FORMAT -
            0-0000000-000000000000000000000000
            pixel flag - ascii character - color
    0xffffffff - KEYBOARD ASCII